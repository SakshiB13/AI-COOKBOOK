//jshint esversion:6

const { response } = require('express');
const express = require('express')
const bodyParser = require("body-parser");
const app = express();
const port = 5000
var promptText;
var recipe = '';


app.use(express.static(__dirname + '/public'));
app.use(bodyParser.urlencoded({extended:true}));

require("dotenv").config();


const { Configuration, OpenAIApi } = require("openai");


const configuration = new Configuration({
  apiKey:process.env.OPENAI_API_KEY
});
const openai = new OpenAIApi(configuration);


app.post("/recipegenerator", async (req, res) => {
  promptText = req.body.prompt;
  console.log(promptText);
  try {
    if (promptText == null) {
      throw new Error("Uh oh, no prompt was provided");
    }
  
    const response = await openai.createCompletion({
      model: "text-davinci-003",
      prompt: "Write a recipe based on these ingredients and instructions:" + promptText,
      temperature: 0.3,
      max_tokens: 500,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
    });
    const completion=response.data.choices[0].text;
    recipe=completion;
   console.log(recipe);
  } catch (error) {
    console.log(error.message);
  }
  res.redirect("/recipe");
});

app.get('/', (req, res)=>{
  res.sendFile(__dirname + '/public/src/home.html');  
});

app.post('/', (req, res)=>{
  res.redirect("/recipegenerator");  
});

app.get('/recipegenerator', (req, res)=>{
  res.sendFile(__dirname + '/public/src/RecipeGenerator.html');  
});

/* app.get('/recipe', (req, res)=>{
  const promptText = req.promptText;
  const recipe = req.recipe;
  res.sendFile(__dirname + '/public/src/recipe.html',{ prompt: promptText, recipes: recipe });
  //res.render('recipe', );  
});
 */
app.get('/recipe', (req, res)=>{
 
  const filePath = __dirname + '/public/src/recipe.html';
  const options = {
    headers: {
      'Content-Type': 'text/html'
    }
  };
  const html = `<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://getbootstrap.com/docs/5.2/assets/css/docs.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <title>AI CookBook</title>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js"></script>
    <link rel="stylesheet" href="/css/styles.css">
    <nav class="navbar navbar-expand-lg bg-light">
      <a class="navbar-brand" href="/">  <i class="fa-solid fa-bowl-rice"></i> AI CookBook</a>
     
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarTogglerDemo01" aria-controls="navbarTogglerDemo01" aria-expanded="false" aria-label="Toggle navigation">
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarTogglerDemo01">
     
          <ul class="navbar-nav me-auto mb-2 mb-lg-0">
            <li class="nav-item">
              <a class="nav-link" href="/recipegenerator">Get a Recipe</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/AboutUs">About Us</a>
            </li>
            
          </ul>
        </div>
 
    </nav>
  </head>
     

  <body>
  
<div class="recipe">
    <div class="live-typed">
        <p>Disclaimer: </p>
        <p class="typed-text"> The Recipes are generated by AI. Eat at your own risk!!!</p>
      </div> 
<h2 id="prompt">Generated Recipe for ${promptText} :</h2>
<pre id="recipes"> ${recipe}</pre>
</div>
</body>
<div class="footer-padding"></div>
  <div class="footer">
    <p>Made with ❤️ by Sakshi Bole</p>
  </div>
</html>
`;
  res.status(200).send(html);
});



app.get('/aboutus', (req, res)=>{
  res.sendFile(__dirname + '/public/src/aboutus.html');  
});


app.listen(port, () => {
  console.log(`Server started at port ${port}`)
})
